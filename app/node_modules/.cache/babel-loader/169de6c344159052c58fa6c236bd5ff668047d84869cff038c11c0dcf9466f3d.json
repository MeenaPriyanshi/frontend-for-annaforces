{"ast":null,"code":"var _jsxFileName = \"E:\\\\NEW\\\\frontend-for-annaforces\\\\app\\\\src\\\\components\\\\ProblemsList\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\n/**\n * ProblemsList Component\n * @description Displays a list of coding problems fetched from the backend API.\n * @param {object} props - React component props. (No explicit props are used by this component).\n * @returns {JSX.Element} The JSX element representing the problems list page.\n * @async false\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProblemsList() {\n  _s();\n  // State to store the list of problems fetched from the API.\n  const [problems, setProblems] = useState([]);\n  // State to manage the loading status during API calls.\n  const [loading, setLoading] = useState(true);\n  // State to store any error that occurs during the API call.\n  const [error, setError] = useState(null);\n\n  // useEffect hook to perform side effects, in this case, fetching data when the component mounts.\n  useEffect(() => {\n    document.title = 'Problems List';\n\n    /**\n     * fetchProblems\n     * @description Asynchronously fetches the list of problems from the backend API.\n     * @param {void} - No input parameters.\n     * @returns {void} - Updates the component's state (problems, loading, error).\n     * @async true\n     */\n    const fetchProblems = async () => {\n      try {\n        // Make an API call to fetch the list of problems.\n        // The base URL is retrieved from environment variables for flexibility.\n        // The /api/problems endpoint is used as per the API design.\n        const token = localStorage.getItem('token');\n        const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/problems`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        // Set the problems state with the 'list' array from the API response.\n        // This handles the specific structure of the backend API response.\n        setProblems(response.data);\n      } catch (err) {\n        // Catch and set any errors that occur during the API call.\n        setError(err);\n      } finally {\n        // Set loading to false once the API call is complete, regardless of success or failure.\n        setLoading(false);\n      }\n    };\n    fetchProblems();\n  }, []); // Empty dependency array ensures this effect runs only once after the initial render.\n\n  // Display a loading message while the data is being fetched.\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading problems...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Display an error message if the API call failed.\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Problems\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Array.isArray(problems) && problems.map(problem => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/problems/${problem.id || 'NA'}`,\n          children: problem.title || 'NA'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this)\n      }, problem.id || `problem-${Math.random()}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n_s(ProblemsList, \"8z7LmWsd4LxJJPdWGy9MWQaHl24=\");\n_c = ProblemsList;\nexport default ProblemsList;\nvar _c;\n$RefreshReg$(_c, \"ProblemsList\");","map":{"version":3,"names":["React","useEffect","useState","axios","Link","jsxDEV","_jsxDEV","ProblemsList","_s","problems","setProblems","loading","setLoading","error","setError","document","title","fetchProblems","token","localStorage","getItem","response","get","process","env","REACT_APP_API_BASE_URL","headers","data","err","children","fileName","_jsxFileName","lineNumber","columnNumber","message","Array","isArray","map","problem","to","id","Math","random","_c","$RefreshReg$"],"sources":["E:/NEW/frontend-for-annaforces/app/src/components/ProblemsList/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\n/**\n * ProblemsList Component\n * @description Displays a list of coding problems fetched from the backend API.\n * @param {object} props - React component props. (No explicit props are used by this component).\n * @returns {JSX.Element} The JSX element representing the problems list page.\n * @async false\n */\nfunction ProblemsList() {\n    // State to store the list of problems fetched from the API.\n    const [problems, setProblems] = useState([]);\n    // State to manage the loading status during API calls.\n    const [loading, setLoading] = useState(true);\n    // State to store any error that occurs during the API call.\n    const [error, setError] = useState(null);\n\n    // useEffect hook to perform side effects, in this case, fetching data when the component mounts.\n    useEffect(() => {\n        document.title = 'Problems List';\n\n        /**\n         * fetchProblems\n         * @description Asynchronously fetches the list of problems from the backend API.\n         * @param {void} - No input parameters.\n         * @returns {void} - Updates the component's state (problems, loading, error).\n         * @async true\n         */\n        const fetchProblems = async () => {\n            try {\n                // Make an API call to fetch the list of problems.\n                // The base URL is retrieved from environment variables for flexibility.\n                // The /api/problems endpoint is used as per the API design.\n                const token = localStorage.getItem('token');\n                const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/problems`, {\n                    headers: {\n                        'Authorization': `Bearer ${token}`\n                    }\n                });\n                // Set the problems state with the 'list' array from the API response.\n                // This handles the specific structure of the backend API response.\n                setProblems(response.data);\n            } catch (err) {\n                // Catch and set any errors that occur during the API call.\n                setError(err);\n            } finally {\n                // Set loading to false once the API call is complete, regardless of success or failure.\n                setLoading(false);\n            }\n        };\n\n        fetchProblems();\n    }, []); // Empty dependency array ensures this effect runs only once after the initial render.\n\n    // Display a loading message while the data is being fetched.\n    if (loading) {\n        return <div>Loading problems...</div>;\n    }\n\n    // Display an error message if the API call failed.\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    }\n\n    return (\n        <div>\n            <h1>Problems</h1>\n            <ul>\n                {/* Map through the problems array to render each problem as a list item. */}\n                {/* Use a unique key for each list item, falling back to a random key if problem.id is missing. */}\n                {Array.isArray(problems) && problems.map(problem => (\n                    <li key={problem.id || `problem-${Math.random()}`}>\n                        {/* Link to the individual problem detail page. */}\n                        {/* Display 'NA' for problem.id or problem.title if they are missing from the API response. */}\n                        <Link to={`/problems/${problem.id || 'NA'}`}>{problem.title || 'NA'}</Link>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default ProblemsList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,kBAAkB;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AANA,SAAAC,MAAA,IAAAC,OAAA;AAOA,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACpB;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C;EACA,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C;EACA,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAD,SAAS,CAAC,MAAM;IACZc,QAAQ,CAACC,KAAK,GAAG,eAAe;;IAEhC;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACA;QACA;QACA;QACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,MAAMC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,eAAe,EAAE;UACnFC,OAAO,EAAE;YACL,eAAe,EAAE,UAAUR,KAAK;UACpC;QACJ,CAAC,CAAC;QACF;QACA;QACAR,WAAW,CAACW,QAAQ,CAACM,IAAI,CAAC;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACV;QACAd,QAAQ,CAACc,GAAG,CAAC;MACjB,CAAC,SAAS;QACN;QACAhB,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDK,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,IAAIN,OAAO,EAAE;IACT,oBAAOL,OAAA;MAAAuB,QAAA,EAAK;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACzC;;EAEA;EACA,IAAIpB,KAAK,EAAE;IACP,oBAAOP,OAAA;MAAAuB,QAAA,GAAK,SAAO,EAAChB,KAAK,CAACqB,OAAO;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAC5C;EAEA,oBACI3B,OAAA;IAAAuB,QAAA,gBACIvB,OAAA;MAAAuB,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjB3B,OAAA;MAAAuB,QAAA,EAGKM,KAAK,CAACC,OAAO,CAAC3B,QAAQ,CAAC,IAAIA,QAAQ,CAAC4B,GAAG,CAACC,OAAO,iBAC5ChC,OAAA;QAAAuB,QAAA,eAGIvB,OAAA,CAACF,IAAI;UAACmC,EAAE,EAAE,aAAaD,OAAO,CAACE,EAAE,IAAI,IAAI,EAAG;UAAAX,QAAA,EAAES,OAAO,CAACtB,KAAK,IAAI;QAAI;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO;MAAC,GAHtEK,OAAO,CAACE,EAAE,IAAI,WAAWC,IAAI,CAACC,MAAM,CAAC,CAAC,EAAE;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAI7C,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd;AAACzB,EAAA,CAvEQD,YAAY;AAAAoC,EAAA,GAAZpC,YAAY;AAyErB,eAAeA,YAAY;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}