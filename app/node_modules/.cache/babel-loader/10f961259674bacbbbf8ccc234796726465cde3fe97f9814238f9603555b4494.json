{"ast":null,"code":"var _jsxFileName = \"E:\\\\NEW\\\\frontend-for-annaforces\\\\app\\\\src\\\\components\\\\ProblemSubmissions\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\n\n/**\r\n * ProblemSubmissions Component\r\n * @description Displays a list of submissions for a specific problem fetched from the backend API.\r\n * @param {object} props - React component props. (No explicit props are used by this component).\r\n * @returns {JSX.Element} The JSX element representing the problem submissions page.\r\n * @async false\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProblemSubmissions() {\n  _s();\n  // Extract the 'id' parameter (problem ID) from the URL.\n  const {\n    id\n  } = useParams();\n  // State to store the list of submissions fetched from the API.\n  const [submissions, setSubmissions] = useState([]);\n  // State to manage the loading status during API calls.\n  const [loading, setLoading] = useState(true);\n  // State to store any error that occurs during the API call.\n  const [error, setError] = useState(null);\n\n  // useEffect hook to perform side effects, fetching data based on the problem ID.\n  useEffect(() => {\n    /**\r\n     * fetchSubmissions\r\n     * @description Asynchronously fetches the list of submissions for a problem from the backend API.\r\n     * @param {void} - No input parameters.\r\n     * @returns {void} - Updates the component's state (submissions, loading, error).\r\n     * @async true\r\n     */\n    const fetchSubmissions = async () => {\n      try {\n        // Make an API call to fetch the list of submissions for the given problem ID.\n        const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/problems/${id}/submissions`);\n        // Set the submissions state with the data received from the API.\n        setSubmissions(response.data);\n      } catch (err) {\n        // Catch and set any errors that occur during the API call.\n        setError(err);\n      } finally {\n        // Set loading to false once the API call is complete, regardless of success or failure.\n        setLoading(false);\n      }\n    };\n    fetchSubmissions();\n  }, [id]); // Dependency array includes 'id' so the effect re-runs if the ID changes.\n\n  // Update page title once submissions data is loaded\n  useEffect(() => {\n    if (submissions) {\n      document.title = `Submissions for Problem ${id}`;\n    }\n  }, [submissions, id]);\n\n  // Display a loading message while the data is being fetched.\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading submissions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Display an error message if the API call failed.\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Submissions for Problem \", id || 'NA']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), submissions.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: submissions.map(submission => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Submission ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 29\n        }, this), \" \", submission.id || 'NA', /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 84\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"User ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 29\n        }, this), \" \", submission.user_id || 'NA', /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 83\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Status:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 29\n        }, this), \" \", submission.status || 'NA', /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 81\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Timestamp:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 29\n        }, this), \" \", submission.timestamp || 'NA']\n      }, submission.id || `submission-${Math.random()}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No submissions found for this problem.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n_s(ProblemSubmissions, \"AZpVGVqa/nlPxR0y41u5pHvRNr0=\", false, function () {\n  return [useParams];\n});\n_c = ProblemSubmissions;\nexport default ProblemSubmissions;\nvar _c;\n$RefreshReg$(_c, \"ProblemSubmissions\");","map":{"version":3,"names":["React","useEffect","useState","axios","useParams","jsxDEV","_jsxDEV","ProblemSubmissions","_s","id","submissions","setSubmissions","loading","setLoading","error","setError","fetchSubmissions","response","get","process","env","REACT_APP_API_BASE_URL","data","err","document","title","children","fileName","_jsxFileName","lineNumber","columnNumber","message","length","map","submission","user_id","status","timestamp","Math","random","_c","$RefreshReg$"],"sources":["E:/NEW/frontend-for-annaforces/app/src/components/ProblemSubmissions/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n/**\r\n * ProblemSubmissions Component\r\n * @description Displays a list of submissions for a specific problem fetched from the backend API.\r\n * @param {object} props - React component props. (No explicit props are used by this component).\r\n * @returns {JSX.Element} The JSX element representing the problem submissions page.\r\n * @async false\r\n */\r\nfunction ProblemSubmissions() {\r\n    // Extract the 'id' parameter (problem ID) from the URL.\r\n    const { id } = useParams();\r\n    // State to store the list of submissions fetched from the API.\r\n    const [submissions, setSubmissions] = useState([]);\r\n    // State to manage the loading status during API calls.\r\n    const [loading, setLoading] = useState(true);\r\n    // State to store any error that occurs during the API call.\r\n    const [error, setError] = useState(null);\r\n\r\n    // useEffect hook to perform side effects, fetching data based on the problem ID.\r\n    useEffect(() => {\r\n        /**\r\n         * fetchSubmissions\r\n         * @description Asynchronously fetches the list of submissions for a problem from the backend API.\r\n         * @param {void} - No input parameters.\r\n         * @returns {void} - Updates the component's state (submissions, loading, error).\r\n         * @async true\r\n         */\r\n        const fetchSubmissions = async () => {\r\n            try {\r\n                // Make an API call to fetch the list of submissions for the given problem ID.\r\n                const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/problems/${id}/submissions`);\r\n                // Set the submissions state with the data received from the API.\r\n                setSubmissions(response.data);\r\n            } catch (err) {\r\n                // Catch and set any errors that occur during the API call.\r\n                setError(err);\r\n            } finally {\r\n                // Set loading to false once the API call is complete, regardless of success or failure.\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchSubmissions();\r\n    }, [id]); // Dependency array includes 'id' so the effect re-runs if the ID changes.\r\n\r\n    // Update page title once submissions data is loaded\r\n    useEffect(() => {\r\n        if (submissions) {\r\n            document.title = `Submissions for Problem ${id}`;\r\n        }\r\n    }, [submissions, id]);\r\n\r\n    // Display a loading message while the data is being fetched.\r\n    if (loading) {\r\n        return <div>Loading submissions...</div>;\r\n    }\r\n\r\n    // Display an error message if the API call failed.\r\n    if (error) {\r\n        return <div>Error: {error.message}</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Submissions for Problem {id || 'NA'}</h1>\r\n            {submissions.length > 0 ? (\r\n                <ul>\r\n                    {submissions.map(submission => (\r\n                        <li key={submission.id || `submission-${Math.random()}`}>\r\n                            <strong>Submission ID:</strong> {submission.id || 'NA'}<br/>\r\n                            <strong>User ID:</strong> {submission.user_id || 'NA'}<br/>\r\n                            <strong>Status:</strong> {submission.status || 'NA'}<br/>\r\n                            <strong>Timestamp:</strong> {submission.timestamp || 'NA'}\r\n                            {/* Add more submission details as needed */}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            ) : (\r\n                <p>No submissions found for this problem.</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProblemSubmissions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}